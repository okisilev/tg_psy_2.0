#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API –ü—Ä–æ–¥–∞–º—É—Å
 */

const { config } = require('dotenv');
config();

async function testProdamusApi() {
    console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API –ü—Ä–æ–¥–∞–º—É—Å...\n');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
const requiredVars = [
    'PRODAMUS_SHOP_ID',
    'PRODAMUS_SECRET_KEY',
    'PRODAMUS_PAYMENT_FORM_URL',
    'WEBHOOK_URL',
    'PRODAMUS_WEBHOOK_URL'
];

let allVarsPresent = true;
requiredVars.forEach(varName => {
    if (process.env[varName]) {
        const value = process.env[varName];
        const maskedValue = value.length > 10 ? 
            value.substring(0, 10) + '...' : 
            value;
        console.log(`‚úÖ ${varName}: ${maskedValue}`);
    } else {
        console.log(`‚ùå ${varName}: –ù–ï –ù–ê–°–¢–†–û–ï–ù–ê`);
        allVarsPresent = false;
    }
});

if (!allVarsPresent) {
    console.log('\n‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
    process.exit(1);
}

console.log('\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ü—Ä–æ–¥–∞–º—É—Å...');

try {
    const ProdamusService = require('../src/services/prodamusService');
    const prodamusService = new ProdamusService();

    console.log('‚úÖ –°–µ—Ä–≤–∏—Å –ü—Ä–æ–¥–∞–º—É—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏
    console.log('\nüí≥ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏...');
    
    const paymentData = {
        userId: 'test_user_123',
        amount: 1000,
        description: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª',
        orderId: 'test_' + Math.floor(Math.random() * 100000)
    };

    const result = await prodamusService.createPayment(paymentData);
    
    if (result.success) {
        console.log('‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üîó URL: ${result.paymentUrl}`);
        console.log(`üì¶ Order ID: ${result.orderId}`);
        
        // –ê–Ω–∞–ª–∏–∑ URL
        const url = new URL(result.paymentUrl);
        const params = url.searchParams;
        
        console.log('\nüìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Å—ã–ª–∫–∏:');
        for (const [key, value] of params) {
            console.log(`   ${key}: ${decodeURIComponent(value)}`);
        }
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏:', result.error);
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ HMAC –ø–æ–¥–ø–∏—Å–∏
    console.log('\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ HMAC –ø–æ–¥–ø–∏—Å–∏...');
    
    const testData = {
        do: 'link',
        sys: process.env.PRODAMUS_SHOP_ID,
        order_id: 'test_signature',
        amount: 1000,
        currency: 'RUB'
    };
    
    const signature = prodamusService.createHmacSignature(testData);
    testData.signature = signature;
    
    const isValid = prodamusService.verifyWebhookSignature(testData, signature);
    
    if (isValid) {
        console.log('‚úÖ HMAC –ø–æ–¥–ø–∏—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤ HMAC –ø–æ–¥–ø–∏—Å–∏');
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ REST API
    console.log('\nüåê –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ REST API...');
    
    try {
        const restResult = await prodamusService.makeRestApiRequest('/rest/test/', {
            test: 'data'
        });
        console.log('‚úÖ REST API –¥–æ—Å—Ç—É–ø–µ–Ω');
    } catch (error) {
        console.log('‚ö†Ô∏è  REST API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');
    }

    console.log('\n‚ú® –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testProdamusApi().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
});
